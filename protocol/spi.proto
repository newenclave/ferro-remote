package fr.proto.spi;

import "common.proto";

option cc_generic_services = true;

message bus_available_req {
    optional uint32 bus_id  = 1;
    optional uint32 channel = 2;
}

message bus_available_res {
    optional bool value = 1;
}

message setup_info {
    optional uint32 speed   = 1;
    optional uint32 mode    = 2;
}

message open_req {
    optional uint32     bus     = 1;
    optional uint32     channel = 2;
    optional setup_info setup   = 3;
}

message open_res {
    optional handle hdl = 1;
}

message setup_req {
    optional handle     hdl   = 1;
    optional setup_info setup = 2;
}

message setup_res { }

message transfer_req {
    optional handle hdl   = 1;
    optional bytes  data  = 2;
}

message transfer_res {
    optional bytes  data  = 2;
}

message transfer_list_req {
    optional handle hdl     = 1;
    repeated bytes  datas   = 2;
    optional bool   nothrow = 3;
}

message transfer_list_res {
    repeated bytes  datas  = 2;
    repeated uint32 errors = 3;
}

message write_req {
    optional handle hdl  = 1;
    optional bytes  data = 2;
}

message write_res { }

message read_req {
    optional handle hdl  = 1;
    optional uint32 len  = 2;
}

message read_res {
    optional bytes  data = 2;
}

message wr_req {
    optional handle hdl  = 1;
    repeated bytes  data = 2;
}

message wr_res {
    repeated bytes  data = 2;
}

service instance {

    rpc bus_available(bus_available_req) returns (bus_available_res);

    rpc open       (open_req)        returns (open_res);
    rpc setup      (setup_req)       returns (setup_res);
    rpc close      (handle)          returns (empty);

    rpc write      (write_req)       returns (write_res);
    rpc read       (read_req)        returns (read_res);
    rpc wr         (wr_req)          returns (wr_res);

    rpc transfer      (transfer_req)       returns (transfer_res);
    rpc transfer_list (transfer_list_req)  returns (transfer_list_res);

}

