package fr.proto.i2c;

import "common.proto";

option cc_generic_services = true;

message bus_available_req {
    optional uint32 bus_id = 1;
}

message bus_available_res {
    optional bool value = 1;
}

message open_req {
    optional uint32 bus_id      = 1;
    optional uint64 slave_id    = 2;
    optional bool   force_slave = 3;
}

message open_res {
    optional handle hdl = 1;
}

enum i2c_control_codes { /// from linux/i2c-dev.h

/* /dev/i2c-X ioctl commands.  The ioctl's parameter is always an
 * unsigned long, except for:
 *    - I2C_FUNCS, takes pointer to an unsigned long
 *    - I2C_RDWR, takes pointer to struct i2c_rdwr_ioctl_data
 *    - I2C_SMBUS, takes pointer to struct i2c_smbus_ioctl_data
 */

    CODE_I2C_RETRIES     = 0x0701;  /* number of times a device address should
                                       be polled when not acknowledging */
    CODE_I2C_TIMEOUT     = 0x0702;  /* set timeout in units of 10 ms */

    /* NOTE: Slave address is 7 or 10 bits, but 10-bit addresses
     * are NOT supported! (due to code brokenness)
     */
    CODE_I2C_SLAVE       = 0x0703;  /* Use this slave address */
    CODE_I2C_SLAVE_FORCE = 0x0706;  /* Use this slave address, even if it
                                       is already in use by a driver! */
    CODE_I2C_TENBIT      = 0x0704;  /* 0 for 7 bit addrs, != 0 for 10 bit */
    CODE_I2C_PEC         = 0x0708;  /* != 0 to use PEC with SMBus */

    //// I make it as calls
    // CODE_I2C_FUNCS       = 0x0705 /* Get the adapter functionality mask */
    // CODE_I2C_RDWR        = 0x0707 /* Combined R/W transfer (one STOP only) */
    // CODE_I2C_SMBUS       = 0x0720 /* SMBus transfer */
}

enum i2c_funcs_codes { /// linux/i2c.h
    FUNC_I2C                    = 0x00000001;
    FUNC_10BIT_ADDR             = 0x00000002;
    FUNC_PROTOCOL_MANGLING      = 0x00000004; /* I2C_M_IGNORE_NAK etc. */
    FUNC_SMBUS_PEC              = 0x00000008;
    FUNC_NOSTART                = 0x00000010; /* I2C_M_NOSTART */
    FUNC_SMBUS_BLOCK_PROC_CALL  = 0x00008000; /* SMBus 2.0 */
    FUNC_SMBUS_QUICK            = 0x00010000;
    FUNC_SMBUS_READ_BYTE        = 0x00020000;
    FUNC_SMBUS_WRITE_BYTE       = 0x00040000;
    FUNC_SMBUS_READ_BYTE_DATA   = 0x00080000;
    FUNC_SMBUS_WRITE_BYTE_DATA  = 0x00100000;
    FUNC_SMBUS_READ_WORD_DATA   = 0x00200000;
    FUNC_SMBUS_WRITE_WORD_DATA  = 0x00400000;
    FUNC_SMBUS_PROC_CALL        = 0x00800000;
    FUNC_SMBUS_READ_BLOCK_DATA  = 0x01000000;
    FUNC_SMBUS_WRITE_BLOCK_DATA = 0x02000000;
    FUNC_SMBUS_READ_I2C_BLOCK   = 0x04000000; /* I2C-like block xfer  */
    FUNC_SMBUS_WRITE_I2C_BLOCK  = 0x08000000; /* w/ 1-byte reg. addr. */
}

message ioctl_req {
    optional handle hdl       = 1;
    optional int32  code      = 2; // @i2c_control_codes
    optional uint64 parameter = 3; // ... is always an unsigned long
}

message ioctl_res { }

message data_block {
    optional handle  hdl     = 1;
    optional bytes   data    = 2;
    optional uint32  length  = 3;
}

message func_mask_req {
    optional handle  hdl = 1;
}

message func_mask_res {
    optional uint64 mask = 1;
}

message write_read_data {
    optional uint32 value        = 1;
    optional bytes  block        = 2;
    optional bool   broken_block = 3;
    message list {
        repeated write_read_data value = 1;
    }
}

message code_data {
    optional uint32             code = 1;
    optional write_read_data    data = 2;
    message list {
        repeated code_data value = 1;
    }
}

message write_read_data_req {
    optional handle             hdl     = 1;
    optional code_data          request = 2;
}

message write_read_data_res {
    optional write_read_data    data = 1;
}

message write_read_datas_req {
    optional handle          hdl     = 1;
    optional code_data.list  request = 2;
}

message write_read_datas_res {
    optional code_data.list  response = 1;
}

message transfer_info {
    optional bytes           data  = 1;
    optional uint32          rxlen = 2;
}

message transfer_req {
    optional handle          hdl     = 1;
    optional transfer_info   info    = 2;
    //optional bool            nothrow = 4;
}

message transfer_res {
    optional bytes data = 2;
}

message transfer_list_req {
    optional handle          hdl     = 1;
    repeated transfer_info   infos   = 2;
    //optional bool            nothrow = 4;
}

message transfer_list_res {
    repeated bytes data = 2;
}

service instance {

    rpc ping( empty ) returns ( empty );

    rpc bus_available( bus_available_req ) returns ( bus_available_res );

    rpc open( open_req ) returns ( open_res );

    rpc read(  data_block )  returns ( data_block );
    rpc write( data_block )  returns ( data_block );

    //// byte
    rpc read_byte( write_read_data_req ) returns ( write_read_data_res );
    rpc write_byte( write_read_data_req ) returns ( write_read_data_res );

    //// { byte, byte, byte }
    rpc read_bytes( write_read_datas_req ) returns ( write_read_datas_res );
    rpc write_bytes( write_read_datas_req ) returns ( write_read_datas_res );

    //// word
    rpc read_word( write_read_data_req ) returns ( write_read_data_res );
    rpc write_word( write_read_data_req ) returns ( write_read_data_res );

    //// { word, word, word }
    rpc read_words( write_read_datas_req ) returns ( write_read_datas_res );
    rpc write_words( write_read_datas_req ) returns ( write_read_datas_res );

    rpc read_block( write_read_data_req ) returns ( write_read_data_res );
    rpc write_block( write_read_data_req ) returns ( write_read_data_res );

    /// word  -> I2C_SMBUS_PROC_CALL -> word as result
    /// or data block -> I2C_SMBUS_BLOCK_PROC_CALL -> data block as result
    rpc process_call( write_read_data_req ) returns ( write_read_data_res );

    rpc ioctl( ioctl_req ) returns ( ioctl_res );
    rpc func_mask( func_mask_req ) returns ( func_mask_res );

    rpc transfer      (transfer_req)       returns (transfer_res);
    rpc transfer_list (transfer_list_req)  returns (transfer_list_res);

    rpc close( handle ) returns ( empty );
}
